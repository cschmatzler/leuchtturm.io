---
# Source: nginx-ingress-controller/templates/serviceaccount.yaml

  labels:
    app.kubernetes.io/name: nginx-ingress-controller
    helm.sh/chart: nginx-ingress-controller-9.2.0
    app.kubernetes.io/instance: nginx-ingress-controller
    app.kubernetes.io/managed-by: Helm
  annotations:
automountServiceAccountToken: true
---
# Source: nginx-ingress-controller/templates/default-backend-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-ingress-controller-default-backend
  namespace: "infrastructure"
  labels:
    app.kubernetes.io/name: nginx-ingress-controller
    helm.sh/chart: nginx-ingress-controller-9.2.0
    app.kubernetes.io/instance: nginx-ingress-controller
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: default-backend
data:
  defaultBackend.conf: |-
    
---
# Source: nginx-ingress-controller/templates/clusterrole.yaml

---
# Source: nginx-ingress-controller/templates/clusterrolebinding.yaml

---
# Source: nginx-ingress-controller/templates/role.yaml

---
# Source: nginx-ingress-controller/templates/rolebinding.yaml

---
# Source: nginx-ingress-controller/templates/controller-service.yaml

---
# Source: nginx-ingress-controller/templates/default-backend-service.yaml

---
# Source: nginx-ingress-controller/templates/controller-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-ingress-controller
  namespace: "infrastructure"
  labels:
    app.kubernetes.io/name: nginx-ingress-controller
    helm.sh/chart: nginx-ingress-controller-9.2.0
    app.kubernetes.io/instance: nginx-ingress-controller
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: nginx-ingress-controller
      app.kubernetes.io/instance: nginx-ingress-controller
      app.kubernetes.io/component: controller
  replicas: 2
  revisionHistoryLimit: 10
  minReadySeconds: 0
  template:
    metadata:
      labels:
        app.kubernetes.io/name: nginx-ingress-controller
        helm.sh/chart: nginx-ingress-controller-9.2.0
        app.kubernetes.io/instance: nginx-ingress-controller
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: controller
    spec:
      
      dnsPolicy: ClusterFirst
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: nginx-ingress-controller
                    app.kubernetes.io/instance: nginx-ingress-controller
                    app.kubernetes.io/component: controller
                namespaces:
                  - "infrastructure"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      hostNetwork: false
      serviceAccountName: nginx-ingress-controller
      terminationGracePeriodSeconds: 60
      containers:
        - name: controller
          image: docker.io/bitnami/nginx-ingress-controller:1.2.0-debian-10-r6
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            runAsNonRoot: true
            runAsUser: 1001
          args:
            - /nginx-ingress-controller
            - --default-backend-service=infrastructure/nginx-ingress-controller-default-backend
            - --publish-service=infrastructure/nginx-ingress-controller
            - --election-id=ingress-controller-leader
            - --controller-class=k8s.io/ingress-nginx
            - --configmap=infrastructure/nginx-ingress-controller
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          envFrom:
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
            - name: https
              containerPort: 443
              protocol: TCP
          resources:
            limits: {}
            requests: {}
          volumeMounts:
      volumes:
---
# Source: nginx-ingress-controller/templates/default-backend-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-ingress-controller-default-backend
  namespace: "infrastructure"
  labels:
    app.kubernetes.io/name: nginx-ingress-controller
    helm.sh/chart: nginx-ingress-controller-9.2.0
    app.kubernetes.io/instance: nginx-ingress-controller
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: default-backend
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: nginx-ingress-controller
      app.kubernetes.io/instance: nginx-ingress-controller
      app.kubernetes.io/component: default-backend
  replicas: 2
  template:
    metadata:
      labels:
        app.kubernetes.io/name: nginx-ingress-controller
        helm.sh/chart: nginx-ingress-controller-9.2.0
        app.kubernetes.io/instance: nginx-ingress-controller
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: default-backend
    spec:
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: nginx-ingress-controller
                    app.kubernetes.io/instance: nginx-ingress-controller
                    app.kubernetes.io/component: default-backend
                namespaces:
                  - "infrastructure"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      serviceAccountName: nginx-ingress-controller
      terminationGracePeriodSeconds: 60
      containers:
        - name: default-backend
          image: docker.io/bitnami/nginx:1.21.6-debian-10-r104
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          args:
          env:
          envFrom:
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 0
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: nginx-config-volume
              mountPath: /opt/bitnami/nginx/conf/bitnami/
              readOnly: true
      volumes:
        - name: nginx-config-volume
          configMap:
            name: nginx-ingress-controller-default-backend
            items:
              - key: defaultBackend.conf
                path: defaultBackend.conf
---
# Source: nginx-ingress-controller/templates/ingressclass.yaml
apiVersion: networking.k8s.io/v1
kind: IngressClass
metadata:
  labels:
    app.kubernetes.io/name: nginx-ingress-controller
    helm.sh/chart: nginx-ingress-controller-9.2.0
    app.kubernetes.io/instance: nginx-ingress-controller
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  name: nginx
spec:
  controller: k8s.io/ingress-nginx
